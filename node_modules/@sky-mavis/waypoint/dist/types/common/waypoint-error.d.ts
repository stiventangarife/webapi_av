import { InternalRpcError, InvalidParamsRpcError, TransactionRejectedRpcError, UnauthorizedProviderError, UserRejectedRequestError } from "viem";
export type WaypointError = {
    code: number;
    message: string;
};
/**
 * Dictionary Errors:
 * - User Error: 1xxx
 * - Logic Error: 2xxx
 * - Server Error: 3xxx
 * - Chain Error: 4xxx
 */
export declare const WaypointErrorMap: Readonly<{
    readonly WALLET_USER_CANCEL: {
        readonly code: 1000;
        readonly message: "User rejected";
    };
    readonly WALLET_SIGN_NO_PARAMS: {
        readonly code: 1001;
        readonly message: "Missing message or typedData";
    };
    readonly WALLET_INVALID_PAYLOAD: {
        readonly code: 1003;
        readonly message: "Invalid payload";
    };
    readonly AUTHORIZE_INVALID_PAYLOAD: {
        readonly code: 1004;
        readonly message: "Invalid payload";
    };
    readonly WALLET_UNKNOWN_ERR: {
        readonly code: 2000;
        readonly message: "Unknown error";
    };
    readonly WALLET_NO_ADDRESS_ERR: {
        readonly code: 2001;
        readonly message: "Can't get user address";
    };
    readonly WALLET_CANT_CREATE: {
        readonly code: 3000;
        readonly message: "Can't create the wallet";
    };
    readonly WALLET_CANT_SIMULATE: {
        readonly code: 4000;
        readonly message: "Can't simulate contract request";
    };
}>;
export declare const normalizeWaypointError: (idErr: WaypointError) => UserRejectedRequestError | InvalidParamsRpcError | UnauthorizedProviderError | TransactionRejectedRpcError | InternalRpcError;
