import { PopupAuthorizeData, PopupAuthorizeOpts, RedirectAuthorizeOpts } from "./auth";
export type DelegationAuthorizeOpts = PopupAuthorizeOpts | RedirectAuthorizeOpts;
export type PopupDelegationAuthorizeData = {
    clientShard: string;
} & PopupAuthorizeData;
export type DelegationAuthorizeData<T> = T extends PopupAuthorizeOpts ? PopupDelegationAuthorizeData : undefined;
export declare const delegationAuthorize: <T extends DelegationAuthorizeOpts>(opts: T) => Promise<DelegationAuthorizeData<T>>;
export declare const parseRedirectUrlWithShard: () => Promise<{
    clientShard: string;
    state: string | null;
    authorizationCode: string | null;
    token: string | null;
    address: `0x${string}` | undefined;
    secondaryAddress: `0x${string}` | undefined;
}>;
