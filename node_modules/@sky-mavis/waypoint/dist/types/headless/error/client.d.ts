export declare enum HeadlessClientErrorCode {
    InvalidWaypointTokenError = -1100,
    InvalidClientShardError = -1101,
    UnsupportedTransactionTypeError = -1102,
    PrepareTransactionError = -1103,
    UnsupportedChainIdError = -1104,
    AddressIsNotMatch = -1105,
    ParseTypedDataError = -1106,
    OpenSocketError = -2200,
    ListenSocketMessageError = -2201,
    MissingMessageError = -2202,
    WebAssemblyNotSupportedError = -3300,
    InstantiateError = -3301,
    SetupGoWasmEnvError = -3302,
    CreateWasmInstanceError = -3303,
    HandlerNotFoundError = -3304,
    WasmGetProtocolResultError = -3305,
    WasmReceiveSocketDataError = -3306,
    WasmTriggerSignError = -3307,
    WasmTriggerKeygenError = -3308,
    AuthenticateError = -4400,
    DecryptClientShardError = -4401,
    EncryptClientShardError = -4402,
    BackupClientShardError = -4403,
    InvalidSignatureError = -4404,
    SendTransactionError = -4405,
    UnknownError = -9900
}
type HeadlessClientErrorOpts = {
    code: HeadlessClientErrorCode;
    message: string;
    cause: unknown;
};
export type HeadlessClientErrorType = HeadlessClientError & {
    name: "HeadlessClientError";
};
export declare class HeadlessClientError extends Error {
    name: string;
    code: HeadlessClientErrorCode;
    shortMessage: string;
    constructor({ code, message, cause }: HeadlessClientErrorOpts);
}
export {};
