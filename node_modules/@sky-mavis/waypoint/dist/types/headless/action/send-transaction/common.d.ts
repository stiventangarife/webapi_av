import { type AccessList, type Address, type Hex } from "viem";
export declare const SupportedTransaction: {
    readonly Legacy: "0x0";
    readonly EIP1559: "0x2";
    readonly RoninGasSponsor: "0x64";
};
export declare const UnsupportedTransaction: {
    readonly EIP2930: "0x1";
    readonly EIP4844: "0x3";
    readonly EIP7702: "0x4";
};
export type SupportedTransactionType = (typeof SupportedTransaction)[keyof typeof SupportedTransaction];
export type UnsupportedTransactionType = (typeof UnsupportedTransaction)[keyof typeof UnsupportedTransaction];
export type TransactionType = SupportedTransactionType | UnsupportedTransactionType;
export declare const PAYER_INFO: {
    readonly s: "0x3caeb99cc6659c5ca4c66b91b1686a86fe0493e1122bdd09f2babdf72e54041a";
    readonly r: "0xdbdbd0989f595c0921acaf9c80342bbeff3b8ea6d2a9ad3167e63010715de3fd";
    readonly v: "0x1";
};
export type TransactionParams = {
    type?: TransactionType;
    nonce?: Hex;
    to: Address | null;
    from?: Address;
    value?: Hex;
    input?: Hex;
    data?: Hex;
    gas?: Hex;
    gasPrice?: Hex;
    accessList?: AccessList;
    maxPriorityFeePerGas?: Hex;
    maxFeePerGas?: Hex;
    maxFeePerBlobGas?: Hex;
    blobVersionedHashes?: Array<Hex>;
    blobs?: Array<Hex>;
};
export type ChainParams = {
    chainId: number;
    rpcUrl: string;
};
export type SendTransactionParams = {
    waypointToken: string;
    clientShard: string;
    chain: ChainParams;
    transaction: TransactionParams;
    wasmUrl: string;
    wsUrl: string;
};
export type SendTransactionResult = {
    txHash: Hex;
    signature: Hex;
};
export type TransactionInServerFormat = {
    from: Address;
    to: Address;
    value: Hex;
    input: Hex;
    nonce: Hex;
    gas: Hex;
    gasPrice: Hex;
    maxPriorityFeePerGas: Hex;
    maxFeePerGas: Hex;
    type: SupportedTransactionType;
    chainId: Hex;
    r: Hex;
    v: Hex;
    s: Hex;
    payerS: Hex;
    payerR: Hex;
    payerV: Hex;
    expiredTime: Hex;
};
