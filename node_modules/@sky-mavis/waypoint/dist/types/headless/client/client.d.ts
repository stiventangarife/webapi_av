import { TransactionParams } from "../action/send-transaction/common";
import { ServiceEnv } from "../utils/service-url";
export type CreateHeadlessClientOpts = {
    chainId: number;
    overrideRpcUrl?: string;
    serviceEnv?: ServiceEnv;
    wasmUrl?: string;
};
type BaseParams = {
    waypointToken: string;
};
type ConnectParams = BaseParams & {
    clientShard: string;
};
type ConnectWithPasswordParams = BaseParams & {
    recoveryPassword: string;
};
export declare class HeadlessClient {
    private core;
    protected constructor(opts: CreateHeadlessClientOpts);
    static create: (opts: CreateHeadlessClientOpts) => HeadlessClient;
    connect: (params: ConnectParams) => {
        address: `0x${string}`;
        provider: import("./provider").HeadlessProvider;
    };
    connectWithPassword: (params: ConnectWithPasswordParams) => Promise<{
        address: `0x${string}`;
        provider: import("./provider").HeadlessProvider;
        clientShard: string;
    }>;
    isSignable: () => boolean;
    getAddress: () => `0x${string}`;
    getProvider: () => import("./provider").HeadlessProvider;
    getUserProfile: () => Promise<import("..").GetUserProfileResult>;
    validateSponsorTx: (transaction: TransactionParams) => Promise<import("..").ValidateSponsorTransactionResult>;
}
export {};
