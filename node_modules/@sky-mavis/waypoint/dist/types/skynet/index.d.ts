import { Paths } from "./paths";
declare const RequestKey: {
    readonly searchAccountActivities: "/accounts/{address}/activities/search";
    readonly getNFTsFromAddress: "/accounts/{address}/nfts";
    readonly getBalanceFromAddress: "/accounts/{address}/fungible_tokens";
    readonly getCollectionsFromAddress: "/accounts/{address}/collections";
    readonly getNFTsFromAddressAndContract: "/accounts/{address}/contracts/{contractAddress}/tokens";
    readonly getBalanceFromAddressAndContract: "/accounts/{address}/contracts/{contractAddress}";
    readonly getBalancesFromAddressAndContracts: "/accounts/{address}/contracts";
    readonly getTokenTransfersFromAddress: "/accounts/{address}/tokens/transfers";
    readonly getTokenTransfersFromAddressAndContract: "/accounts/{address}/tokens/{contractAddress}/transfers";
    readonly getTransitionsFromAddress: "/accounts/{address}/txs";
    readonly getInternalTransactionTransfersFromAddress: "/accounts/{address}/internal_txs/transfers";
    readonly getFinalizedBlockNumber: "/blocks/finalized/number";
    readonly getLatestBlockNumber: "/blocks/latest/number";
    readonly getTransactionsByBlockNumber: "/blocks/{blockNumber}/txs";
    readonly getBlockByNumber: "/blocks/{blockNumber}";
    readonly getBlock: "/blocks";
    readonly getNFTOwners: "/collections/{contractAddress}/tokens/{tokenId}/owners";
    readonly getNFTTransfers: "/collections/{contractAddress}/tokens/{tokenId}/transfers";
    readonly getNFTDetails: "/collections/{contractAddress}/tokens/{tokenId}";
    readonly refreshNFTMetadata: "/collections/{contractAddress}/tokens/metadata/refresh_sync";
    readonly refreshNFTMetadataAsync: "/collections/{contractAddress}/tokens/metadata/refresh_async";
    readonly getNFTsDetails: "/collections/{contractAddress}/tokens";
    readonly getNFTsFromCollection: "/collections/{contractAddress}/tokens";
    readonly getTotalCollectionFromAddress: "/collections/{contractAddress}/owners/{address}";
    readonly getOwnersFromCollection: "/collections/{contractAddress}/owners";
    readonly getCollectionTransfers: "/collections/{contractAddress}/transfers";
    readonly getCollectionDetails: "/collections/{contractAddress}";
    readonly getCollectionsDetails: "/collections";
    readonly getContractDetails: "/contracts/{contractAddress}";
    readonly getContractsDetails: "/contracts";
    readonly getInternalTransactionsFromTransaction: "/txs/{txHash}/internal_txs";
    readonly getTransactionDetails: "/txs/{txHash}";
    readonly getTransactionsDetails: "/txs/";
};
type Method = "get" | "post" | "put" | "delete" | "options" | "head" | "patch" | "trace";
type PathParams<T> = T extends {
    parameters: {
        path: infer P;
    };
} ? P : never;
type QueryParams<T> = T extends {
    parameters: {
        query?: infer Q;
    };
} ? Q : never;
type RequestBody<T> = T extends {
    requestBody: {
        content: {
            "application/json": infer B;
        };
    };
} ? B : never;
type RequestParams<M extends Method, T extends keyof Paths> = PathParams<Paths[T][M]> & (QueryParams<Paths[T][M]> extends never ? {} : {
    query?: QueryParams<Paths[T][M]>;
}) & (RequestBody<Paths[T][M]> extends never ? {} : {
    body: RequestBody<Paths[T][M]>;
});
export type SkynetConfig = {
    skynetBaseUrl?: string;
    apiKey: string;
};
export declare class Skynet {
    private readonly apiKey;
    private readonly fetcher;
    constructor(config: SkynetConfig);
    private apiCall;
    searchAccountActivities(params: RequestParams<"post", typeof RequestKey.searchAccountActivities>): Promise<{
        result?: {
            items?: {
                address?: string | undefined;
                blockNumber?: number | undefined;
                txIndex?: number | undefined;
                txHash?: string | undefined;
                activity?: string | undefined;
                blockTime?: number | undefined;
                details?: {
                    contract?: {
                        address?: string | undefined;
                        name?: string | undefined;
                        symbol?: string | undefined;
                        standard?: string | undefined;
                        creator?: string | undefined;
                        createdAtBlock?: number | undefined;
                        verifiedName?: string | undefined;
                        verifiedSymbol?: string | undefined;
                        verifiedStandard?: string | undefined;
                    } | undefined;
                    sends?: {
                        from?: string | undefined;
                        to?: string | undefined;
                        amount?: string | undefined;
                        tokenId?: string | undefined;
                        token?: {
                            contractAddress?: string | undefined;
                            name?: string | undefined;
                            symbol?: string | undefined;
                            standard?: string | undefined;
                            decimals?: string | undefined;
                        } | undefined;
                    }[] | undefined;
                    receives?: {
                        from?: string | undefined;
                        to?: string | undefined;
                        amount?: string | undefined;
                        tokenId?: string | undefined;
                        token?: {
                            contractAddress?: string | undefined;
                            name?: string | undefined;
                            symbol?: string | undefined;
                            standard?: string | undefined;
                            decimals?: string | undefined;
                        } | undefined;
                    }[] | undefined;
                    approvals?: {
                        owner?: string | undefined;
                        spender?: string | undefined;
                        amount?: string | undefined;
                        tokenId?: string | undefined;
                        isAll?: boolean | undefined;
                        token?: {
                            contractAddress?: string | undefined;
                            name?: string | undefined;
                            symbol?: string | undefined;
                            standard?: string | undefined;
                            decimals?: string | undefined;
                        } | undefined;
                    }[] | undefined;
                    orders?: {
                        maker?: string | undefined;
                        taker?: string | undefined;
                        price?: string | undefined;
                        paymentToken?: {
                            contractAddress?: string | undefined;
                            name?: string | undefined;
                            symbol?: string | undefined;
                            standard?: string | undefined;
                            decimals?: string | undefined;
                        } | undefined;
                        assets?: {
                            tokenStandard?: string | undefined;
                            address?: {
                                contractAddress?: string | undefined;
                                name?: string | undefined;
                                symbol?: string | undefined;
                                standard?: string | undefined;
                                decimals?: string | undefined;
                            } | undefined;
                            tokenId?: string | undefined;
                            amount?: string | undefined;
                        }[] | undefined;
                    }[] | undefined;
                } | undefined;
            }[] | undefined;
            paging?: {
                nextCursor?: string | undefined;
            } | undefined;
        } | undefined;
    }>;
    getNFTsFromAddress(params: RequestParams<"get", typeof RequestKey.getNFTsFromAddress>): Promise<{
        result?: {
            items?: {
                contractAddress?: string | undefined;
                tokenId?: string | undefined;
                balance?: string | undefined;
                name?: string | undefined;
                symbol?: string | undefined;
                standard?: string | undefined;
                tokenUri?: string | undefined;
                metadata?: Record<string, never> | undefined;
            }[] | undefined;
            paging?: {
                nextCursor?: string | undefined;
            } | undefined;
        } | undefined;
    }>;
    getBalanceFromAddress(params: RequestParams<"get", typeof RequestKey.getBalanceFromAddress>): Promise<{
        result?: {
            items?: {
                contractAddress?: string | undefined;
                name?: string | undefined;
                symbol?: string | undefined;
                standard?: string | undefined;
                balance?: string | undefined;
                decimals?: number | undefined;
                tokenCount?: number | undefined;
                metadata?: Record<string, never> | undefined;
            }[] | undefined;
            paging?: {
                nextCursor?: string | undefined;
            } | undefined;
        } | undefined;
    }>;
    getCollectionsFromAddress(params: RequestParams<"get", typeof RequestKey.getCollectionsFromAddress>): Promise<{
        result?: {
            items?: {
                contractAddress?: string | undefined;
                name?: string | undefined;
                symbol?: string | undefined;
                standard?: string | undefined;
                balance?: string | undefined;
                decimals?: number | undefined;
                tokenCount?: number | undefined;
                metadata?: Record<string, never> | undefined;
            }[] | undefined;
            paging?: {
                nextCursor?: string | undefined;
            } | undefined;
        } | undefined;
    }>;
    getNFTsFromAddressAndContract(params: RequestParams<"get", typeof RequestKey.getNFTsFromAddressAndContract>): Promise<{
        result?: {
            items?: {
                contractAddress?: string | undefined;
                name?: string | undefined;
                symbol?: string | undefined;
                standard?: string | undefined;
                balance?: string | undefined;
                decimals?: number | undefined;
                tokenCount?: number | undefined;
                metadata?: Record<string, never> | undefined;
            }[] | undefined;
            paging?: {
                nextCursor?: string | undefined;
            } | undefined;
        } | undefined;
    }>;
    getBalanceFromAddressAndContract(params: RequestParams<"get", typeof RequestKey.getBalanceFromAddressAndContract>): Promise<{
        result?: {
            contractAddress?: string | undefined;
            name?: string | undefined;
            symbol?: string | undefined;
            standard?: string | undefined;
            balance?: string | undefined;
            decimals?: number | undefined;
            tokenCount?: number | undefined;
            metadata?: Record<string, never> | undefined;
        } | undefined;
    }>;
    getBalancesFromAddressAndContracts(params: RequestParams<"post", typeof RequestKey.getBalancesFromAddressAndContracts>): Promise<{
        result?: {
            items?: {
                contractAddress?: string | undefined;
                name?: string | undefined;
                symbol?: string | undefined;
                standard?: string | undefined;
                balance?: string | undefined;
                decimals?: number | undefined;
                tokenCount?: number | undefined;
                metadata?: Record<string, never> | undefined;
            }[] | undefined;
        } | undefined;
    }>;
    getTokenTransfersFromAddress(params: RequestParams<"get", typeof RequestKey.getTokenTransfersFromAddress>): Promise<{
        result?: {
            items?: {
                blockNumber?: number | undefined;
                logIndex?: number | undefined;
                tokenId?: string | undefined;
                contractAddress?: string | undefined;
                tokenStandard?: string | undefined;
                tokenName?: string | undefined;
                tokenSymbol?: string | undefined;
                decimals?: number | undefined;
                from?: string | undefined;
                to?: string | undefined;
                value?: string | undefined;
                blockHash?: string | undefined;
                transactionHash?: string | undefined;
                blockTime?: number | undefined;
            }[] | undefined;
            paging?: {
                nextCursor?: string | undefined;
            } | undefined;
        } | undefined;
    }>;
    getTokenTransfersFromAddressAndContract(params: RequestParams<"get", typeof RequestKey.getTokenTransfersFromAddressAndContract>): Promise<{
        result?: {
            items?: {
                blockNumber?: number | undefined;
                logIndex?: number | undefined;
                tokenId?: string | undefined;
                contractAddress?: string | undefined;
                tokenStandard?: string | undefined;
                tokenName?: string | undefined;
                tokenSymbol?: string | undefined;
                decimals?: number | undefined;
                from?: string | undefined;
                to?: string | undefined;
                value?: string | undefined;
                blockHash?: string | undefined;
                transactionHash?: string | undefined;
                blockTime?: number | undefined;
            }[] | undefined;
            paging?: {
                nextCursor?: string | undefined;
            } | undefined;
        } | undefined;
    }>;
    getTransitionsFromAddress(params: RequestParams<"get", typeof RequestKey.getTransitionsFromAddress>): Promise<{
        result?: {
            items?: {
                transactionHash?: string | undefined;
                transactionIndex?: number | undefined;
                blockHash?: string | undefined;
                blockNumber?: number | undefined;
                from?: string | undefined;
                to?: string | undefined;
                contractAddress?: string | undefined;
                status?: number | undefined;
                gas?: number | undefined;
                gasPrice?: string | undefined;
                effectiveGasPrice?: string | undefined;
                gasUsed?: number | undefined;
                cumulativeGasUsed?: number | undefined;
                logsBloom?: string | undefined;
                input?: string | undefined;
                nonce?: number | undefined;
                value?: string | undefined;
                type?: number | undefined;
                v?: string | undefined;
                r?: string | undefined;
                s?: string | undefined;
                blockTime?: number | undefined;
                chainId?: string | undefined;
                maxFeePerGas?: string | undefined;
                maxPriorityFeePerGas?: string | undefined;
                payer?: string | undefined;
                payerV?: string | undefined;
                payerR?: string | undefined;
                payerS?: string | undefined;
                expiredTime?: number | undefined;
            }[] | undefined;
            paging?: {
                nextCursor?: string | undefined;
            } | undefined;
        } | undefined;
    }>;
    getInternalTransactionTransfersFromAddress(params: RequestParams<"get", typeof RequestKey.getInternalTransactionTransfersFromAddress>): Promise<{
        result?: {
            items?: {
                transactionHash?: string | undefined;
                order?: number | undefined;
                opcode?: string | undefined;
                type?: string | undefined;
                value?: string | undefined;
                input?: string | undefined;
                from?: string | undefined;
                to?: string | undefined;
                success?: boolean | undefined;
                error?: string | undefined;
                blockNumber?: number | undefined;
                blockHash?: string | undefined;
                blockTime?: number | undefined;
            }[] | undefined;
            paging?: {
                nextCursor?: string | undefined;
            } | undefined;
        } | undefined;
    }>;
    getFinalizedBlockNumber(): Promise<{
        result?: {
            blockNumber?: number | undefined;
        } | undefined;
    }>;
    getLatestBlockNumber(): Promise<{
        result?: {
            blockNumber?: number | undefined;
        } | undefined;
    }>;
    getTransactionsByBlockNumber(params: RequestParams<"get", typeof RequestKey.getTransactionsByBlockNumber>): Promise<{
        result?: {
            items?: {
                transactionHash?: string | undefined;
                transactionIndex?: number | undefined;
                blockHash?: string | undefined;
                blockNumber?: number | undefined;
                from?: string | undefined;
                to?: string | undefined;
                contractAddress?: string | undefined;
                status?: number | undefined;
                gas?: number | undefined;
                gasPrice?: string | undefined;
                effectiveGasPrice?: string | undefined;
                gasUsed?: number | undefined;
                cumulativeGasUsed?: number | undefined;
                logsBloom?: string | undefined;
                input?: string | undefined;
                nonce?: number | undefined;
                value?: string | undefined;
                type?: number | undefined;
                v?: string | undefined;
                r?: string | undefined;
                s?: string | undefined;
                blockTime?: number | undefined;
                chainId?: string | undefined;
                maxFeePerGas?: string | undefined;
                maxPriorityFeePerGas?: string | undefined;
                payer?: string | undefined;
                payerV?: string | undefined;
                payerR?: string | undefined;
                payerS?: string | undefined;
                expiredTime?: number | undefined;
            }[] | undefined;
        } | undefined;
    }>;
    getBlockByNumber(params: RequestParams<"get", typeof RequestKey.getBlockByNumber>): Promise<{
        result?: {
            hash?: string | undefined;
            number?: number | undefined;
            parentHash?: string | undefined;
            transactions?: string[] | undefined;
            nonce?: number | undefined;
            mixHash?: string | undefined;
            logsBloom?: string | undefined;
            stateRoot?: string | undefined;
            transactionsRoot?: string | undefined;
            receiptsRoot?: string | undefined;
            coinbase?: string | undefined;
            difficulty?: number | undefined;
            totalDifficulty?: number | undefined;
            extraData?: string | undefined;
            size?: number | undefined;
            gasLimit?: number | undefined;
            gasUsed?: number | undefined;
            baseFeePerGas?: string | undefined;
            timestamp?: number | undefined;
        } | undefined;
    }>;
    getBlock(params: RequestParams<"get", typeof RequestKey.getBlock>): Promise<{
        result?: {
            hash?: string | undefined;
            number?: number | undefined;
            parentHash?: string | undefined;
            transactions?: string[] | undefined;
            nonce?: number | undefined;
            mixHash?: string | undefined;
            logsBloom?: string | undefined;
            stateRoot?: string | undefined;
            transactionsRoot?: string | undefined;
            receiptsRoot?: string | undefined;
            coinbase?: string | undefined;
            difficulty?: number | undefined;
            totalDifficulty?: number | undefined;
            extraData?: string | undefined;
            size?: number | undefined;
            gasLimit?: number | undefined;
            gasUsed?: number | undefined;
            baseFeePerGas?: string | undefined;
            timestamp?: number | undefined;
        } | {
            items?: {
                hash?: string | undefined;
                number?: number | undefined;
                parentHash?: string | undefined;
                transactions?: string[] | undefined;
                nonce?: number | undefined;
                mixHash?: string | undefined;
                logsBloom?: string | undefined;
                stateRoot?: string | undefined;
                transactionsRoot?: string | undefined;
                receiptsRoot?: string | undefined;
                coinbase?: string | undefined;
                difficulty?: number | undefined;
                totalDifficulty?: number | undefined;
                extraData?: string | undefined;
                size?: number | undefined;
                gasLimit?: number | undefined;
                gasUsed?: number | undefined;
                baseFeePerGas?: string | undefined;
                timestamp?: number | undefined;
            } | undefined;
        } | undefined;
    }>;
    getNFTOwners(params: RequestParams<"get", typeof RequestKey.getNFTOwners>): Promise<{
        result?: {
            items?: {
                address?: string | undefined;
                balance?: string | undefined;
            }[] | undefined;
            paging?: {
                nextCursor?: string | undefined;
            } | undefined;
        } | undefined;
    }>;
    getNFTTransfers(params: RequestParams<"get", typeof RequestKey.getNFTTransfers>): Promise<{
        result?: {
            items?: {
                blockNumber?: number | undefined;
                logIndex?: number | undefined;
                tokenId?: string | undefined;
                contractAddress?: string | undefined;
                tokenStandard?: string | undefined;
                tokenName?: string | undefined;
                tokenSymbol?: string | undefined;
                decimals?: number | undefined;
                from?: string | undefined;
                to?: string | undefined;
                value?: string | undefined;
                blockHash?: string | undefined;
                transactionHash?: string | undefined;
                blockTime?: number | undefined;
            }[] | undefined;
            paging?: {
                nextCursor?: string | undefined;
            } | undefined;
        } | undefined;
    }>;
    getNFTDetails(params: RequestParams<"get", typeof RequestKey.getNFTDetails>): Promise<{
        result?: {
            tokenId?: string | undefined;
            contractAddress?: string | undefined;
            name?: string | undefined;
            symbol?: string | undefined;
            standard?: string | undefined;
            tokenUri?: string | undefined;
            metadata?: Record<string, never> | undefined;
        } | undefined;
    }>;
    refreshNFTMetadata(params: RequestParams<"post", typeof RequestKey.refreshNFTMetadata>): Promise<{
        result?: {
            successes?: string[] | undefined;
            failures?: string[] | undefined;
        } | undefined;
    }>;
    refreshNFTMetadataAsync(params: RequestParams<"post", typeof RequestKey.refreshNFTMetadataAsync>): Promise<{
        result?: string | undefined;
    }>;
    getNFTsDetails(params: RequestParams<"post", typeof RequestKey.getNFTsDetails>): Promise<{
        result?: {
            items?: {
                tokenId?: string | undefined;
                contractAddress?: string | undefined;
                name?: string | undefined;
                symbol?: string | undefined;
                standard?: string | undefined;
                tokenUri?: string | undefined;
                metadata?: Record<string, never> | undefined;
            }[] | undefined;
        } | undefined;
    }>;
    getNFTsFromCollection(params: RequestParams<"get", typeof RequestKey.getNFTsFromCollection>): Promise<{
        result?: {
            items?: {
                tokenId?: string | undefined;
                contractAddress?: string | undefined;
                name?: string | undefined;
                symbol?: string | undefined;
                standard?: string | undefined;
                tokenUri?: string | undefined;
                metadata?: Record<string, never> | undefined;
            }[] | undefined;
            paging?: {
                nextCursor?: string | undefined;
            } | undefined;
        } | undefined;
    }>;
    getTotalCollectionFromAddress(params: RequestParams<"get", typeof RequestKey.getTotalCollectionFromAddress>): Promise<{
        result?: {
            address?: string | undefined;
            balance?: string | undefined;
            tokenCount?: number | undefined;
        } | undefined;
    }>;
    getOwnersFromCollection(params: RequestParams<"get", typeof RequestKey.getOwnersFromCollection>): Promise<{
        result?: {
            items?: {
                address?: string | undefined;
                balance?: string | undefined;
                tokenCount?: number | undefined;
            }[] | undefined;
            paging?: {
                nextCursor?: string | undefined;
            } | undefined;
        } | undefined;
    }>;
    getCollectionTransfers(params: RequestParams<"get", typeof RequestKey.getCollectionTransfers>): Promise<{
        result?: {
            items?: {
                blockNumber?: number | undefined;
                logIndex?: number | undefined;
                tokenId?: string | undefined;
                contractAddress?: string | undefined;
                tokenStandard?: string | undefined;
                tokenName?: string | undefined;
                tokenSymbol?: string | undefined;
                decimals?: number | undefined;
                from?: string | undefined;
                to?: string | undefined;
                value?: string | undefined;
                blockHash?: string | undefined;
                transactionHash?: string | undefined;
                blockTime?: number | undefined;
            }[] | undefined;
            paging?: {
                nextCursor?: string | undefined;
            } | undefined;
        } | undefined;
    }>;
    getCollectionDetails(params: RequestParams<"get", typeof RequestKey.getCollectionDetails>): Promise<{
        result?: {
            contractAddress?: string | undefined;
            name?: string | undefined;
            symbol?: string | undefined;
            standard?: string | undefined;
            totalSupply?: string | undefined;
            totalOwners?: number | undefined;
            totalTransfers?: number | undefined;
            metadata?: Record<string, never> | undefined;
        } | undefined;
    }>;
    getCollectionsDetails(params: RequestParams<"post", typeof RequestKey.getCollectionsDetails>): Promise<{
        result?: {
            items?: {
                contractAddress?: string | undefined;
                name?: string | undefined;
                symbol?: string | undefined;
                standard?: string | undefined;
                totalSupply?: string | undefined;
                totalOwners?: number | undefined;
                totalTransfers?: number | undefined;
                metadata?: Record<string, never> | undefined;
            }[] | undefined;
        } | undefined;
    }>;
    getContractDetails(params: RequestParams<"get", typeof RequestKey.getContractDetails>): Promise<{
        result?: {
            address?: string | undefined;
            name?: string | undefined;
            symbol?: string | undefined;
            standard?: string | undefined;
            creator?: string | undefined;
            createdAtBlock?: number | undefined;
            verifiedName?: string | undefined;
            verifiedSymbol?: string | undefined;
            verifiedStandard?: string | undefined;
        } | undefined;
    }>;
    getContractsDetails(params: RequestParams<"post", typeof RequestKey.getContractsDetails>): Promise<{
        result?: {
            items?: {
                address?: string | undefined;
                name?: string | undefined;
                symbol?: string | undefined;
                standard?: string | undefined;
                creator?: string | undefined;
                createdAtBlock?: number | undefined;
                verifiedName?: string | undefined;
                verifiedSymbol?: string | undefined;
                verifiedStandard?: string | undefined;
            }[] | undefined;
        } | undefined;
    }>;
    getInternalTransactionsFromTransaction(params: RequestParams<"get", typeof RequestKey.getInternalTransactionsFromTransaction>): Promise<{
        result?: {
            items?: {
                transactionHash?: string | undefined;
                order?: number | undefined;
                opcode?: string | undefined;
                type?: string | undefined;
                value?: string | undefined;
                input?: string | undefined;
                from?: string | undefined;
                to?: string | undefined;
                success?: boolean | undefined;
                error?: string | undefined;
                blockNumber?: number | undefined;
                blockHash?: string | undefined;
                blockTime?: number | undefined;
            }[] | undefined;
        } | undefined;
    }>;
    getTransactionDetails(params: RequestParams<"get", typeof RequestKey.getTransactionDetails>): Promise<{
        result?: {
            transactionHash?: string | undefined;
            order?: number | undefined;
            opcode?: string | undefined;
            type?: string | undefined;
            value?: string | undefined;
            input?: string | undefined;
            from?: string | undefined;
            to?: string | undefined;
            success?: boolean | undefined;
            error?: string | undefined;
            blockNumber?: number | undefined;
            blockHash?: string | undefined;
            blockTime?: number | undefined;
        } | undefined;
    }>;
    getTransactionsDetails(params: RequestParams<"post", typeof RequestKey.getTransactionsDetails>): Promise<{
        result?: {
            items?: {
                transactionHash?: string | undefined;
                transactionIndex?: number | undefined;
                blockHash?: string | undefined;
                blockNumber?: number | undefined;
                from?: string | undefined;
                to?: string | undefined;
                contractAddress?: string | undefined;
                status?: number | undefined;
                gas?: number | undefined;
                gasPrice?: string | undefined;
                effectiveGasPrice?: string | undefined;
                gasUsed?: number | undefined;
                cumulativeGasUsed?: number | undefined;
                logsBloom?: string | undefined;
                input?: string | undefined;
                nonce?: number | undefined;
                value?: string | undefined;
                type?: number | undefined;
                v?: string | undefined;
                r?: string | undefined;
                s?: string | undefined;
                blockTime?: number | undefined;
                chainId?: string | undefined;
                maxFeePerGas?: string | undefined;
                maxPriorityFeePerGas?: string | undefined;
                payer?: string | undefined;
                payerV?: string | undefined;
                payerR?: string | undefined;
                payerS?: string | undefined;
                expiredTime?: number | undefined;
            }[] | undefined;
        } | undefined;
    }>;
}
export {};
