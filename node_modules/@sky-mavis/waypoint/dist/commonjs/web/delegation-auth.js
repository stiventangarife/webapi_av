'use strict';

var common_scope = require('../common/scope.js');
var web_auth = require('./auth.js');
var web_utils_keyHelper = require('./utils/key-helper.js');
var web_utils_storage = require('./utils/storage.js');
var web_utils_validateAddress = require('./utils/validate-address.js');
var common_popup = require('../common/popup.js');
var v4 = require('../v4-D8BIpzex.js');
var common_communicate = require('../common/communicate.js');
var common_gate = require('../common/gate.js');
require('../common/crypto.js');
require('../isAddress-Ajbo9xO8.js');
require('../base-BPC6VLRS.js');
require('../toBytes-Dmnw03lt.js');
require('../size-BDN9jZuU.js');
require('../keccak256-DkMFbAQi.js');
require('../utils-U8Z-__N5.js');
require('../common/Snackbar.js');
require('../rpc-BJmuIVLE.js');
require('../common/defer.js');
require('../common/waypoint-error.js');

const delegationAuthorize = async opts => {
  const {
    mode,
    clientId,
    scopes,
    waypointOrigin = common_gate.RONIN_WAYPOINT_ORIGIN_PROD,
    redirectUrl = window.location.origin,
    ...restConfig
  } = opts;
  const keyPair = await web_utils_keyHelper.generateKeyPair();
  const stringifiedKeyPair = await web_utils_keyHelper.stringifyKeyPair(keyPair);
  if (mode === "redirect") {
    web_utils_storage.setStorage(web_utils_storage.STORAGE_SHARD_TRANSFER_KEY, JSON.stringify(stringifiedKeyPair));
    common_popup.replaceUrl(`${waypointOrigin}/client/${clientId}/authorize`, {
      redirect: redirectUrl,
      state: opts.state ?? v4.v4(),
      scope: common_scope.getDelegationScopesParams(scopes),
      publicKey: stringifiedKeyPair.publicKey
    });
    return undefined;
  }
  const helper = new common_communicate.CommunicateHelper(waypointOrigin);
  const authData = await helper.sendRequest(state => common_popup.openPopup(`${waypointOrigin}/client/${clientId}/authorize`, {
    state,
    redirect: redirectUrl,
    origin: window.location.origin,
    scope: common_scope.getDelegationScopesParams(scopes),
    publicKey: stringifiedKeyPair.publicKey,
    ...restConfig
  }));
  const {
    id_token: token,
    address: rawAddress,
    secondary_address: secondaryAddress,
    wallet_key: encryptedShard
  } = authData ?? {};
  const clientShard = await web_utils_keyHelper.decryptClientShard(encryptedShard, keyPair.privateKey);
  return {
    token,
    address: web_utils_validateAddress.validateIdAddress(rawAddress),
    secondaryAddress: web_utils_validateAddress.validateIdAddress(secondaryAddress),
    clientShard
  };
};
const parseRedirectUrlWithShard = async () => {
  const authData = web_auth.parseRedirectUrl();
  const url = new URL(window.location.href);
  const encryptedShard = url.searchParams.get("wallet_key");
  if (!encryptedShard) {
    throw "parseRedirectUrl: encrypted shard not found";
  }
  const keyPair = web_utils_storage.getStorage(web_utils_storage.STORAGE_SHARD_TRANSFER_KEY);
  if (!keyPair) {
    throw "parseRedirectUrl: client shard key pair not found";
  }
  const privateKey = JSON.parse(keyPair).privateKey;
  const builtPrivateKey = await web_utils_keyHelper.buildPrivateKey(privateKey);
  const clientShard = await web_utils_keyHelper.decryptClientShard(encryptedShard, builtPrivateKey);
  return {
    ...authData,
    clientShard
  };
};

exports.delegationAuthorize = delegationAuthorize;
exports.parseRedirectUrlWithShard = parseRedirectUrlWithShard;
