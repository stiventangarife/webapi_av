'use strict';

var common_Snackbar = require('./Snackbar.js');
var rpc = require('../rpc-BJmuIVLE.js');
require('../base-BPC6VLRS.js');

const DEFAULT_WIDTH = 480;
const DEFAULT_HEIGHT = 720;
const DEFAULT_TITLE = "Ronin Waypoint";
const HASHED_PARAMS = ["data"];
const buildUrlWithQuery = (inputUrl, query) => {
  const url = new URL(inputUrl);
  if (!query) return url;
  Object.entries(query).forEach(([key, value]) => {
    if (value === null || value === undefined) return;
    if (HASHED_PARAMS.includes(key)) {
      url.hash = `${key}=${encodeURIComponent(typeof value === "object" ? JSON.stringify(value) : value.toString())}`;
      return;
    }
    url.searchParams.set(key, value.toString());
  });
  return url;
};
const openPopup = async (inputUrl, query, config) => {
  if (typeof window === "undefined" || !window.top) return Promise.reject(new Error("openPopup: window is not available"));
  const {
    width = DEFAULT_WIDTH,
    height = DEFAULT_HEIGHT
  } = config || {};
  const screenLeft = window.screenLeft ?? window.screenX;
  const screenTop = window.screenTop ?? window.screenY;
  const screenWidth = window.innerWidth;
  const screenHeight = window.innerHeight;
  const left = screenLeft + (screenWidth - width) / 2;
  const top = screenTop + (screenHeight - height) / 2;
  const url = buildUrlWithQuery(inputUrl, query);
  const tryOpenPopup = () => {
    const popup = window.open(url, DEFAULT_TITLE, `scrollbars=yes,width=${width},height=${height},top=${top},left=${left}`);
    popup?.focus();
    if (!popup) return null;
    return popup;
  };
  let popup = tryOpenPopup();
  if (!popup) {
    return new Promise((resolve, reject) => {
      const snackbar = common_Snackbar.Snackbar.getInstance();
      snackbar.show({
        title: "Popup was blocked by the browser",
        message: "Click 'Retry' to attempt opening it again.",
        action: {
          label: "Retry",
          onClick: () => {
            popup = tryOpenPopup();
            if (popup) resolve(popup);
            if (!popup) reject(new rpc.UserRejectedRequestError(new Error("Popup window is BLOCKED by the browser")));
          }
        },
        onClose: () => {
          reject(new rpc.UserRejectedRequestError(new Error("Popup window is BLOCKED by the browser")));
        }
      });
    });
  }
  return Promise.resolve(popup);
};
const replaceUrl = (inputUrl, query) => {
  const url = buildUrlWithQuery(inputUrl, query);
  window.location.assign(url);
};

exports.HASHED_PARAMS = HASHED_PARAMS;
exports.buildUrlWithQuery = buildUrlWithQuery;
exports.openPopup = openPopup;
exports.replaceUrl = replaceUrl;
