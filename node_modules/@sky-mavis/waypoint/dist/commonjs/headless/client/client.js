'use strict';

var headless_client_core = require('./core.js');
require('./provider.js');
require('../action/get-address.js');
require('../action/decrypt-shard.js');
require('../action/encrypt-shard.js');
require('../action/backup-shard.js');
require('../action/keygen.js');
require('../action/personal-sign.js');
require('../action/sign-typed-data.js');
require('../action/send-transaction/send-paid-tx.js');
require('../action/send-transaction/send-sponsored.js');
require('../action/send-transaction/common.js');
require('../action/get-backup-shard.js');
require('../action/get-user-profile.js');
require('../action/validate-sponsor-tx.js');
require('../error/client.js');
require('../error/server.js');
require('../utils/token.js');
require('../wasm/cdn.js');
require('../action/helpers/tx-type-check.js');
require('../utils/service-url.js');
require('../../http-jAHgRxFF.js');
require('../../rpc-BJmuIVLE.js');
require('../../base-BPC6VLRS.js');
require('../../toBytes-Dmnw03lt.js');
require('../../size-BDN9jZuU.js');
require('../../keccak256-DkMFbAQi.js');
require('../../utils-U8Z-__N5.js');
require('../../isAddress-Ajbo9xO8.js');
require('../../common/chain.js');
require('../../saigon-DYBomzZQ.js');
require('../../secp256k1-CzvWuxSM.js');
require('../../sha256-CLylCSfy.js');
require('../proto/rpc.js');
require('../../file-D9-_A4DE.js');
require('../../enum-CbdizYms.js');
require('../proto/backup.js');
require('../track/track.js');
require('../../index-Pma4qYcb.js');
require('../../common/version.js');
require('../../v4-D8BIpzex.js');
require('../../sha256-DGm_MAwc.js');
require('../utils/convertor.js');
require('../action/helpers/authenticate.js');
require('../proto/auth.js');
require('../../to-binary-B8Z0Mr_g.js');
require('../action/helpers/check-weak-bk.js');
require('../action/helpers/open-socket.js');
require('../action/helpers/key.js');
require('../../concat-BguDurHH.js');
require('../../publicKeyToAddress-7k7v6GXz.js');
require('../action/helpers/request/abort-key.js');
require('../action/helpers/request/request.js');
require('../action/helpers/request/abort-controller.js');
require('../action/helpers/request/configurations.js');
require('../action/helpers/get-keygen-handler.js');
require('../wasm/create.js');
require('../wasm/instantiate.js');
require('../action/helpers/send-round-data.js');
require('../action/sign.js');
require('../proto/sign.js');
require('../utils/signature.js');
require('../action/helpers/get-sign-handler.js');
require('../action/helpers/trigger-sign.js');
require('../../isAddressEqual-QoNFma_v.js');
require('../../recoverAddress-C3o2uHFx.js');
require('../action/send-transaction/prepare-tx.js');
require('../../estimate-fee-per-gas-DpeR2wRz.js');
require('../../formatGwei-Sx3AlOf5.js');
require('../../getTransactionType-HIODnQRW.js');
require('../action/send-transaction/send-tx-request.js');
require('../action/send-transaction/serialize-tx.js');
require('../../slice-Ca-rzTkU.js');
require('../action/send-transaction/to-tx-hash.js');
require('../proto/message.js');
require('../../prepare-typed-data-D54m5_ZF.js');
require('../../_polyfill-node.events-Cg_JIuru.js');

class HeadlessClient {
  core;
  constructor(opts) {
    const {
      chainId,
      overrideRpcUrl,
      wasmUrl,
      serviceEnv = "prod"
    } = opts;
    this.core = headless_client_core.HeadlessCore.create({
      chainId,
      overrideRpcUrl,
      wasmUrl,
      serviceEnv
    });
  }
  static create = opts => {
    return new HeadlessClient(opts);
  };
  connect = params => {
    const {
      clientShard,
      waypointToken
    } = params;
    const {
      core
    } = this;
    core.setWaypointToken(waypointToken);
    core.setClientShard(clientShard);
    const address = core.getAddress();
    const provider = core.getProvider();
    return {
      address,
      provider
    };
  };
  connectWithPassword = async params => {
    const {
      recoveryPassword,
      waypointToken
    } = params;
    const {
      core
    } = this;
    core.setWaypointToken(waypointToken);
    const {
      key: backupShard
    } = await core.getBackupClientShard();
    const clientShard = await core.decryptClientShard(backupShard, recoveryPassword);
    const address = core.getAddress();
    const provider = core.getProvider();
    return {
      address,
      provider,
      clientShard
    };
  };
  isSignable = () => {
    return this.core.isSignable();
  };
  getAddress = () => {
    return this.core.getAddress();
  };
  getProvider = () => {
    return this.core.getProvider();
  };
  getUserProfile = () => {
    return this.core.getUserProfile();
  };
  validateSponsorTx = transaction => {
    return this.core.validateSponsorTx(transaction);
  };
}

exports.HeadlessClient = HeadlessClient;
