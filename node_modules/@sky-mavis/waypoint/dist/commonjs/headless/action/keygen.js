'use strict';

var headless_error_client = require('../error/client.js');
var headless_track_track = require('../track/track.js');
var headless_utils_convertor = require('../utils/convertor.js');
var headless_action_helpers_authenticate = require('./helpers/authenticate.js');
var headless_action_helpers_getKeygenHandler = require('./helpers/get-keygen-handler.js');
var headless_action_helpers_openSocket = require('./helpers/open-socket.js');
var headless_action_helpers_sendRoundData = require('./helpers/send-round-data.js');
require('../../index-Pma4qYcb.js');
require('../../common/version.js');
require('../error/server.js');
require('../proto/rpc.js');
require('../../file-D9-_A4DE.js');
require('../../enum-CbdizYms.js');
require('../utils/service-url.js');
require('../../v4-D8BIpzex.js');
require('../../sha256-DGm_MAwc.js');
require('../../sha256-CLylCSfy.js');
require('../../utils-U8Z-__N5.js');
require('../../size-BDN9jZuU.js');
require('../../toBytes-Dmnw03lt.js');
require('../../base-BPC6VLRS.js');
require('../proto/auth.js');
require('../utils/token.js');
require('../../to-binary-B8Z0Mr_g.js');
require('../wasm/create.js');
require('../wasm/instantiate.js');

const wasmTriggerKeygen = async keygenHandler => {
  try {
    const doResponse = await keygenHandler.do("");
    const result = headless_utils_convertor.bytesToJson(doResponse);
    return result;
  } catch (error) {
    throw new headless_error_client.HeadlessClientError({
      cause: error,
      code: headless_error_client.HeadlessClientErrorCode.WasmTriggerKeygenError,
      message: `Unable to trigger the WASM keygen process. This could be due to a wrong version of WASM.`
    });
  }
};
const _keygen = async params => {
  const {
    waypointToken,
    wasmUrl,
    wsUrl
  } = params;
  console.debug("🔐 KEYGEN: start");
  const keygenHandler = await headless_action_helpers_getKeygenHandler.wasmGetKeygenHandler(wasmUrl);
  console.debug("🔐 KEYGEN: wasm is ready");
  const socket = await headless_action_helpers_openSocket.openSocket(`${wsUrl}/v1/public/ws/keygen`);
  const {
    waitAndDequeue
  } = headless_action_helpers_openSocket.createFrameQueue(socket);
  console.debug("🔐 KEYGEN: socket is ready");
  try {
    headless_action_helpers_authenticate.sendAuthenticate(socket, waypointToken);
    const authFrame = await waitAndDequeue();
    const authData = headless_action_helpers_authenticate.decodeAuthenticateData(authFrame);
    console.debug("🔐 KEYGEN: authenticated", authData.uuid);
    const keygenResultPromise = wasmTriggerKeygen(keygenHandler);
    console.debug("🔐 KEYGEN: trigger wasm keygen");
    const sessionFrame = await waitAndDequeue();
    headless_action_helpers_sendRoundData.decodeSessionAndTransferToWasm(keygenHandler, sessionFrame);
    const socketR1 = await waitAndDequeue();
    headless_action_helpers_sendRoundData.decodeProtocolDataAndTransferToWasm(keygenHandler, socketR1);
    console.debug("🔐 KEYGEN: socket - round 1");
    const wasmR1 = await headless_action_helpers_sendRoundData.wasmGetProtocolData(keygenHandler);
    headless_action_helpers_sendRoundData.sendProtocolData(socket, wasmR1);
    console.debug("🔐 KEYGEN: wasm - round 1");
    const socketR2 = await waitAndDequeue();
    headless_action_helpers_sendRoundData.decodeProtocolDataAndTransferToWasm(keygenHandler, socketR2);
    console.debug("🔐 KEYGEN: socket - round 2");
    const wasmR2 = await headless_action_helpers_sendRoundData.wasmGetProtocolData(keygenHandler);
    headless_action_helpers_sendRoundData.sendProtocolData(socket, wasmR2);
    console.debug("🔐 KEYGEN: wasm - round 2");
    const socketR3 = await waitAndDequeue();
    headless_action_helpers_sendRoundData.decodeProtocolDataAndTransferToWasm(keygenHandler, socketR3);
    console.debug("🔐 KEYGEN: socket - round 3");
    const keygenResult = await keygenResultPromise;
    console.debug("🔐 KEYGEN: done");
    return keygenResult.data.key;
  } finally {
    socket.close();
  }
};
const keygen = async params => {
  const {
    waypointToken,
    wasmUrl,
    wsUrl
  } = params;
  const tracker = headless_track_track.createTracker({
    event: headless_track_track.HeadlessEventName.keygen,
    waypointToken,
    productionFactor: wsUrl,
    wasmUrl
  });
  try {
    const result = await _keygen(params);
    tracker.trackOk({});
    return result;
  } catch (error) {
    tracker.trackError(error);
    throw error;
  }
};

exports.keygen = keygen;
