'use strict';

var secp256k1 = require('../../secp256k1-CzvWuxSM.js');
var headless_error_client = require('../error/client.js');
var headless_utils_convertor = require('../utils/convertor.js');
var publicKeyToAddress = require('../../publicKeyToAddress-7k7v6GXz.js');
require('../../sha256-CLylCSfy.js');
require('../../utils-U8Z-__N5.js');
require('../../toBytes-Dmnw03lt.js');
require('../../base-BPC6VLRS.js');
require('../../size-BDN9jZuU.js');
require('../../isAddress-Ajbo9xO8.js');
require('../../keccak256-DkMFbAQi.js');

const getAddressFromShard = clientShard => {
  if (!clientShard) {
    throw new headless_error_client.HeadlessClientError({
      cause: undefined,
      code: headless_error_client.HeadlessClientErrorCode.InvalidClientShardError,
      message: `Unable to get address from client shard. The parameter clientShard="${clientShard}" is NOT valid."`
    });
  }
  try {
    const shardInBytes = headless_utils_convertor.base64ToBytes(clientShard);
    const shard = headless_utils_convertor.bytesToJson(shardInBytes);
    const {
      publicPoint: compressedPublicKeyInBase64
    } = shard;
    const compressedPublicKeyInBytes = headless_utils_convertor.base64ToBytes(compressedPublicKeyInBase64);
    const projPoint = secp256k1.secp256k1.ProjectivePoint.fromHex(compressedPublicKeyInBytes);
    const uncompressedPublicKey = `0x${projPoint.toHex(false)}`;
    return publicKeyToAddress.publicKeyToAddress(uncompressedPublicKey);
  } catch (error) {
    throw new headless_error_client.HeadlessClientError({
      cause: error,
      code: headless_error_client.HeadlessClientErrorCode.InvalidClientShardError,
      message: `Unable to get address from client shard. The parameter clientShard="${clientShard}" is NOT valid."`
    });
  }
};
const getSecretFromShard = clientShard => {
  try {
    const shardInBytes = headless_utils_convertor.base64ToBytes(clientShard);
    const shard = headless_utils_convertor.bytesToJson(shardInBytes);
    const {
      secretShare: secretShareInBase64
    } = shard;
    const secretShareInBytes = headless_utils_convertor.base64ToBytes(secretShareInBase64);
    return secretShareInBytes;
  } catch (error) {
    throw new headless_error_client.HeadlessClientError({
      cause: error,
      code: headless_error_client.HeadlessClientErrorCode.InvalidClientShardError,
      message: `Unable to get secret from client shard. The parameter clientShard="${clientShard}" is NOT valid."`
    });
  }
};

exports.getAddressFromShard = getAddressFromShard;
exports.getSecretFromShard = getSecretFromShard;
