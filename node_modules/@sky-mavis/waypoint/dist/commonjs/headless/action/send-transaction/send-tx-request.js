'use strict';

var headless_proto_rpc = require('../../proto/rpc.js');
var headless_proto_sign = require('../../proto/sign.js');
var headless_utils_convertor = require('../../utils/convertor.js');
var toBinary = require('../../../to-binary-B8Z0Mr_g.js');
var file = require('../../../file-D9-_A4DE.js');
require('../../../enum-CbdizYms.js');
require('../../../toBytes-Dmnw03lt.js');
require('../../../base-BPC6VLRS.js');
require('../../../size-BDN9jZuU.js');

const sendTransactionRequest = (socket, txData, chain) => {
  const sendTransactionParams = {
    tx: txData,
    clientParams: {
      url: chain.rpcUrl,
      chainId: chain.chainId
    }
  };
  const signRequest = file.create(headless_proto_sign.SignRequestSchema, {
    params: headless_utils_convertor.jsonToBytes(sendTransactionParams),
    type: headless_proto_sign.SignType.TRANSACTION
  });
  const frame = file.create(headless_proto_rpc.FrameSchema, {
    data: toBinary.toBinary(headless_proto_sign.SignRequestSchema, signRequest),
    type: headless_proto_rpc.Type.DATA
  });
  socket.send(toBinary.toBinary(headless_proto_rpc.FrameSchema, frame));
};

exports.sendTransactionRequest = sendTransactionRequest;
