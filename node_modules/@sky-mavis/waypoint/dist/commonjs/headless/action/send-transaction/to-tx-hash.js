'use strict';

var headless_error_client = require('../../error/client.js');
var headless_error_server = require('../../error/server.js');
var headless_proto_rpc = require('../../proto/rpc.js');
var headless_proto_sign = require('../../proto/sign.js');
var file = require('../../../file-D9-_A4DE.js');
var size = require('../../../size-BDN9jZuU.js');
require('../../../enum-CbdizYms.js');

function isHash(hash) {
  return size.isHex(hash) && size.size(hash) === 32;
}

const toTxHash = sendTxResponseFrame => {
  if (sendTxResponseFrame.type !== headless_proto_rpc.Type.DATA) throw headless_error_server.decodeServerError(sendTxResponseFrame);
  try {
    const {
      txHash
    } = file.fromBinary(headless_proto_sign.SendTransactionResponseSchema, sendTxResponseFrame.data);
    if (!isHash(txHash)) {
      throw "Invalid transaction hash";
    }
    return txHash;
  } catch (error) {
    throw new headless_error_client.HeadlessClientError({
      code: headless_error_client.HeadlessClientErrorCode.SendTransactionError,
      message: `Unable to decode frame data received from the server. The data should be in a transaction hash schema.`,
      cause: error
    });
  }
};

exports.toTxHash = toTxHash;
