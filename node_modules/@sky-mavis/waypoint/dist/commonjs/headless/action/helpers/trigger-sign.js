'use strict';

var headless_error_client = require('../../error/client.js');
var headless_utils_convertor = require('../../utils/convertor.js');
require('../../../toBytes-Dmnw03lt.js');
require('../../../base-BPC6VLRS.js');
require('../../../size-BDN9jZuU.js');

// * trigger signing process in wasm
const wasmTriggerSign = async (signHandler, keccakMessage, clientShard) => {
  try {
    const wasmSignParams = {
      key: clientShard,
      signMessage: headless_utils_convertor.bytesToBase64(keccakMessage)
    };
    const doResponse = await signHandler.do(JSON.stringify(wasmSignParams));
    const result = headless_utils_convertor.bytesToJson(doResponse);
    if (result?.data?.signature) {
      return headless_utils_convertor.base64ToHex(result.data.signature);
    }
  } catch (error) {
    throw new headless_error_client.HeadlessClientError({
      cause: error,
      code: headless_error_client.HeadlessClientErrorCode.WasmTriggerSignError,
      message: `Unable to trigger the WASM signing process.`
    });
  }
  throw new headless_error_client.HeadlessClientError({
    cause: undefined,
    code: headless_error_client.HeadlessClientErrorCode.WasmTriggerSignError,
    message: `Unable to get signature from WASM sign handler.`
  });
};

exports.wasmTriggerSign = wasmTriggerSign;
