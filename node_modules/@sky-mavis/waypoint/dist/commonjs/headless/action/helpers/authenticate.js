'use strict';

var headless_error_client = require('../../error/client.js');
var headless_error_server = require('../../error/server.js');
var headless_proto_auth = require('../../proto/auth.js');
var headless_proto_rpc = require('../../proto/rpc.js');
var headless_utils_token = require('../../utils/token.js');
var file = require('../../../file-D9-_A4DE.js');
var v4 = require('../../../v4-D8BIpzex.js');
var toBinary = require('../../../to-binary-B8Z0Mr_g.js');
require('../../../enum-CbdizYms.js');
require('../../../index-Pma4qYcb.js');

const sendAuthenticate = (socket, waypointToken) => {
  const authRequest = file.create(headless_proto_auth.AuthenticateRequestSchema, {
    token: headless_utils_token.addBearerPrefix(waypointToken),
    optionalData: {
      requestId: v4.v4()
    }
  });
  const frame = file.create(headless_proto_rpc.FrameSchema, {
    data: toBinary.toBinary(headless_proto_auth.AuthenticateRequestSchema, authRequest),
    type: headless_proto_rpc.Type.DATA
  });
  socket.send(toBinary.toBinary(headless_proto_rpc.FrameSchema, frame));
};
const decodeAuthenticateData = authFrame => {
  if (authFrame.type !== headless_proto_rpc.Type.DATA) throw headless_error_server.decodeServerError(authFrame);
  try {
    const authResponse = file.fromBinary(headless_proto_auth.AuthenticateResponseSchema, authFrame.data);
    return authResponse;
  } catch (error) {
    throw new headless_error_client.HeadlessClientError({
      code: headless_error_client.HeadlessClientErrorCode.AuthenticateError,
      message: `Unable to decode frame data received from the server. The data should be in a authenticate response schema.`,
      cause: error
    });
  }
};

exports.decodeAuthenticateData = decodeAuthenticateData;
exports.sendAuthenticate = sendAuthenticate;
