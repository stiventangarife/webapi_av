import { HeadlessClientError, HeadlessClientErrorCode } from '../../error/client.js';
import { isSupportedTransaction } from '../helpers/tx-type-check.js';
import { SupportedTransaction, PAYER_INFO } from './common.js';
import { g as getAction, i as internal_estimateFeesPerGas, M as MaxFeePerGasTooLowError, E as Eip1559FeesNotSupportedError, a as getBlock, e as estimateFeesPerGas } from '../../../estimate-fee-per-gas-D3htm6BR.js';
import { i as isAddress, I as InvalidAddressError } from '../../../isAddress-D-kYvfsU.js';
import { p as parseAccount, c as createClient, h as http } from '../../../http-D9CsIJ_G.js';
import { B as BaseError } from '../../../base-CC-Hj7CW.js';
import { r as recoverAddress } from '../../../recoverAddress-BD83FT0I.js';
import { b as concatHex } from '../../../concat-CZcWoY2n.js';
import { j as numberToHex, c as hexToBytes, b as bytesToHex, I as InvalidBytesLengthError, h as hexToNumber, i as hexToBigInt } from '../../../toBytes-CiKSrzpb.js';
import { t as toRlp, p as prettyPrint, i as ExecutionRevertedError, F as FeeCapTooHighError, j as FeeCapTooLowError, N as NonceTooHighError, k as NonceTooLowError, l as NonceMaxValueError, n as InsufficientFundsError, o as IntrinsicGasTooHighError, q as IntrinsicGasTooLowError, r as TransactionTypeNotSupportedError, T as TipAboveFeeCapError, U as UnknownNodeError, s as FeeConflictError, m as maxUint256, c as blobsToCommitments, d as commitmentsToVersionedHashes, e as blobsToProofs, f as toBlobSidecars, g as getTransactionType } from '../../../getTransactionType-XZ1KTlkM.js';
import { k as keccak256 } from '../../../keccak256-0IBB9HST.js';
import { a as formatUnits, e as etherUnits, f as formatGwei } from '../../../formatGwei-BX_cgVog.js';
import '../helpers/request/request.js';
import '../../utils/token.js';
import '../../../index-B3KPQWEG.js';
import '../helpers/request/abort-controller.js';
import '../helpers/request/configurations.js';
import '../../../saigon-BY87pDOW.js';
import '../../../rpc-BGk0htDU.js';
import '../../../publicKeyToAddress-DhFB83IE.js';
import '../../../size-CssOTqqV.js';
import '../../../sha256-BHhS4Zh9.js';
import '../../../sha256-E5MvF2nn.js';
import '../../../utils-CKEBUnDS.js';

/**
 * Converts numerical wei to a string representation of ether.
 *
 * - Docs: https://viem.sh/docs/utilities/formatEther
 *
 * @example
 * import { formatEther } from 'viem'
 *
 * formatEther(1000000000000000000n)
 * // '1'
 */
function formatEther(wei, unit = 'wei') {
  return formatUnits(wei, etherUnits[unit]);
}

class AccountStateConflictError extends BaseError {
  constructor({
    address
  }) {
    super(`State for account "${address}" is set multiple times.`, {
      name: 'AccountStateConflictError'
    });
  }
}
class StateAssignmentConflictError extends BaseError {
  constructor() {
    super('state and stateDiff are set on the same account.', {
      name: 'StateAssignmentConflictError'
    });
  }
}

/**
 * Computes an Authorization hash in [EIP-7702 format](https://eips.ethereum.org/EIPS/eip-7702): `keccak256('0x05' || rlp([chain_id, address, nonce]))`.
 */
function hashAuthorization(parameters) {
  const {
    chainId,
    contractAddress,
    nonce,
    to
  } = parameters;
  const hash = keccak256(concatHex(['0x05', toRlp([numberToHex(chainId), contractAddress, nonce ? numberToHex(nonce) : '0x'])]));
  if (to === 'bytes') return hexToBytes(hash);
  return hash;
}

async function recoverAuthorizationAddress(parameters) {
  const {
    authorization,
    signature
  } = parameters;
  return recoverAddress({
    hash: hashAuthorization(authorization),
    signature: signature ?? authorization
  });
}

class EstimateGasExecutionError extends BaseError {
  constructor(cause, {
    account,
    docsPath,
    chain,
    data,
    gas,
    gasPrice,
    maxFeePerGas,
    maxPriorityFeePerGas,
    nonce,
    to,
    value
  }) {
    const prettyArgs = prettyPrint({
      from: account?.address,
      to,
      value: typeof value !== 'undefined' && `${formatEther(value)} ${chain?.nativeCurrency?.symbol || 'ETH'}`,
      data,
      gas,
      gasPrice: typeof gasPrice !== 'undefined' && `${formatGwei(gasPrice)} gwei`,
      maxFeePerGas: typeof maxFeePerGas !== 'undefined' && `${formatGwei(maxFeePerGas)} gwei`,
      maxPriorityFeePerGas: typeof maxPriorityFeePerGas !== 'undefined' && `${formatGwei(maxPriorityFeePerGas)} gwei`,
      nonce
    });
    super(cause.shortMessage, {
      cause,
      docsPath,
      metaMessages: [...(cause.metaMessages ? [...cause.metaMessages, ' '] : []), 'Estimate Gas Arguments:', prettyArgs].filter(Boolean),
      name: 'EstimateGasExecutionError'
    });
    Object.defineProperty(this, "cause", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    this.cause = cause;
  }
}

function getNodeError(err, args) {
  const message = (err.details || '').toLowerCase();
  const executionRevertedError = err instanceof BaseError ? err.walk(e => e?.code === ExecutionRevertedError.code) : err;
  if (executionRevertedError instanceof BaseError) return new ExecutionRevertedError({
    cause: err,
    message: executionRevertedError.details
  });
  if (ExecutionRevertedError.nodeMessage.test(message)) return new ExecutionRevertedError({
    cause: err,
    message: err.details
  });
  if (FeeCapTooHighError.nodeMessage.test(message)) return new FeeCapTooHighError({
    cause: err,
    maxFeePerGas: args?.maxFeePerGas
  });
  if (FeeCapTooLowError.nodeMessage.test(message)) return new FeeCapTooLowError({
    cause: err,
    maxFeePerGas: args?.maxFeePerGas
  });
  if (NonceTooHighError.nodeMessage.test(message)) return new NonceTooHighError({
    cause: err,
    nonce: args?.nonce
  });
  if (NonceTooLowError.nodeMessage.test(message)) return new NonceTooLowError({
    cause: err,
    nonce: args?.nonce
  });
  if (NonceMaxValueError.nodeMessage.test(message)) return new NonceMaxValueError({
    cause: err,
    nonce: args?.nonce
  });
  if (InsufficientFundsError.nodeMessage.test(message)) return new InsufficientFundsError({
    cause: err
  });
  if (IntrinsicGasTooHighError.nodeMessage.test(message)) return new IntrinsicGasTooHighError({
    cause: err,
    gas: args?.gas
  });
  if (IntrinsicGasTooLowError.nodeMessage.test(message)) return new IntrinsicGasTooLowError({
    cause: err,
    gas: args?.gas
  });
  if (TransactionTypeNotSupportedError.nodeMessage.test(message)) return new TransactionTypeNotSupportedError({
    cause: err
  });
  if (TipAboveFeeCapError.nodeMessage.test(message)) return new TipAboveFeeCapError({
    cause: err,
    maxFeePerGas: args?.maxFeePerGas,
    maxPriorityFeePerGas: args?.maxPriorityFeePerGas
  });
  return new UnknownNodeError({
    cause: err
  });
}

function getEstimateGasError(err, {
  docsPath,
  ...args
}) {
  const cause = (() => {
    const cause = getNodeError(err, args);
    if (cause instanceof UnknownNodeError) return err;
    return cause;
  })();
  return new EstimateGasExecutionError(cause, {
    docsPath,
    ...args
  });
}

/**
 * @description Picks out the keys from `value` that exist in the formatter..
 */
function extract(value_, {
  format
}) {
  if (!format) return {};
  const value = {};
  function extract_(formatted) {
    const keys = Object.keys(formatted);
    for (const key of keys) {
      if (key in value_) value[key] = value_[key];
      if (formatted[key] && typeof formatted[key] === 'object' && !Array.isArray(formatted[key])) extract_(formatted[key]);
    }
  }
  const formatted = format(value_ || {});
  extract_(formatted);
  return value;
}

const rpcTransactionType = {
  legacy: '0x0',
  eip2930: '0x1',
  eip1559: '0x2',
  eip4844: '0x3',
  eip7702: '0x4'
};
function formatTransactionRequest(request) {
  const rpcRequest = {};
  if (typeof request.authorizationList !== 'undefined') rpcRequest.authorizationList = formatAuthorizationList(request.authorizationList);
  if (typeof request.accessList !== 'undefined') rpcRequest.accessList = request.accessList;
  if (typeof request.blobVersionedHashes !== 'undefined') rpcRequest.blobVersionedHashes = request.blobVersionedHashes;
  if (typeof request.blobs !== 'undefined') {
    if (typeof request.blobs[0] !== 'string') rpcRequest.blobs = request.blobs.map(x => bytesToHex(x));else rpcRequest.blobs = request.blobs;
  }
  if (typeof request.data !== 'undefined') rpcRequest.data = request.data;
  if (typeof request.from !== 'undefined') rpcRequest.from = request.from;
  if (typeof request.gas !== 'undefined') rpcRequest.gas = numberToHex(request.gas);
  if (typeof request.gasPrice !== 'undefined') rpcRequest.gasPrice = numberToHex(request.gasPrice);
  if (typeof request.maxFeePerBlobGas !== 'undefined') rpcRequest.maxFeePerBlobGas = numberToHex(request.maxFeePerBlobGas);
  if (typeof request.maxFeePerGas !== 'undefined') rpcRequest.maxFeePerGas = numberToHex(request.maxFeePerGas);
  if (typeof request.maxPriorityFeePerGas !== 'undefined') rpcRequest.maxPriorityFeePerGas = numberToHex(request.maxPriorityFeePerGas);
  if (typeof request.nonce !== 'undefined') rpcRequest.nonce = numberToHex(request.nonce);
  if (typeof request.to !== 'undefined') rpcRequest.to = request.to;
  if (typeof request.type !== 'undefined') rpcRequest.type = rpcTransactionType[request.type];
  if (typeof request.value !== 'undefined') rpcRequest.value = numberToHex(request.value);
  return rpcRequest;
}
//////////////////////////////////////////////////////////////////////////////
function formatAuthorizationList(authorizationList) {
  return authorizationList.map(authorization => ({
    address: authorization.contractAddress,
    r: authorization.r,
    s: authorization.s,
    chainId: numberToHex(authorization.chainId),
    nonce: numberToHex(authorization.nonce),
    ...(typeof authorization.yParity !== 'undefined' ? {
      yParity: numberToHex(authorization.yParity)
    } : {}),
    ...(typeof authorization.v !== 'undefined' && typeof authorization.yParity === 'undefined' ? {
      v: numberToHex(authorization.v)
    } : {})
  }));
}

/** @internal */
function serializeStateMapping(stateMapping) {
  if (!stateMapping || stateMapping.length === 0) return undefined;
  return stateMapping.reduce((acc, {
    slot,
    value
  }) => {
    if (slot.length !== 66) throw new InvalidBytesLengthError({
      size: slot.length,
      targetSize: 66,
      type: 'hex'
    });
    if (value.length !== 66) throw new InvalidBytesLengthError({
      size: value.length,
      targetSize: 66,
      type: 'hex'
    });
    acc[slot] = value;
    return acc;
  }, {});
}
/** @internal */
function serializeAccountStateOverride(parameters) {
  const {
    balance,
    nonce,
    state,
    stateDiff,
    code
  } = parameters;
  const rpcAccountStateOverride = {};
  if (code !== undefined) rpcAccountStateOverride.code = code;
  if (balance !== undefined) rpcAccountStateOverride.balance = numberToHex(balance);
  if (nonce !== undefined) rpcAccountStateOverride.nonce = numberToHex(nonce);
  if (state !== undefined) rpcAccountStateOverride.state = serializeStateMapping(state);
  if (stateDiff !== undefined) {
    if (rpcAccountStateOverride.state) throw new StateAssignmentConflictError();
    rpcAccountStateOverride.stateDiff = serializeStateMapping(stateDiff);
  }
  return rpcAccountStateOverride;
}
/** @internal */
function serializeStateOverride(parameters) {
  if (!parameters) return undefined;
  const rpcStateOverride = {};
  for (const {
    address,
    ...accountState
  } of parameters) {
    if (!isAddress(address, {
      strict: false
    })) throw new InvalidAddressError({
      address
    });
    if (rpcStateOverride[address]) throw new AccountStateConflictError({
      address: address
    });
    rpcStateOverride[address] = serializeAccountStateOverride(accountState);
  }
  return rpcStateOverride;
}

function assertRequest(args) {
  const {
    account: account_,
    gasPrice,
    maxFeePerGas,
    maxPriorityFeePerGas,
    to
  } = args;
  const account = account_ ? parseAccount(account_) : undefined;
  if (account && !isAddress(account.address)) throw new InvalidAddressError({
    address: account.address
  });
  if (to && !isAddress(to)) throw new InvalidAddressError({
    address: to
  });
  if (typeof gasPrice !== 'undefined' && (typeof maxFeePerGas !== 'undefined' || typeof maxPriorityFeePerGas !== 'undefined')) throw new FeeConflictError();
  if (maxFeePerGas && maxFeePerGas > maxUint256) throw new FeeCapTooHighError({
    maxFeePerGas
  });
  if (maxPriorityFeePerGas && maxFeePerGas && maxPriorityFeePerGas > maxFeePerGas) throw new TipAboveFeeCapError({
    maxFeePerGas,
    maxPriorityFeePerGas
  });
}

/**
 * Returns the number of [Transactions](https://viem.sh/docs/glossary/terms#transaction) an Account has sent.
 *
 * - Docs: https://viem.sh/docs/actions/public/getTransactionCount
 * - JSON-RPC Methods: [`eth_getTransactionCount`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_gettransactioncount)
 *
 * @param client - Client to use
 * @param parameters - {@link GetTransactionCountParameters}
 * @returns The number of transactions an account has sent. {@link GetTransactionCountReturnType}
 *
 * @example
 * import { createPublicClient, http } from 'viem'
 * import { mainnet } from 'viem/chains'
 * import { getTransactionCount } from 'viem/public'
 *
 * const client = createPublicClient({
 *   chain: mainnet,
 *   transport: http(),
 * })
 * const transactionCount = await getTransactionCount(client, {
 *   address: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',
 * })
 */
async function getTransactionCount(client, {
  address,
  blockTag = 'latest',
  blockNumber
}) {
  const count = await client.request({
    method: 'eth_getTransactionCount',
    params: [address, blockNumber ? numberToHex(blockNumber) : blockTag]
  }, {
    dedupe: Boolean(blockNumber)
  });
  return hexToNumber(count);
}

/**
 * Returns the chain ID associated with the current network.
 *
 * - Docs: https://viem.sh/docs/actions/public/getChainId
 * - JSON-RPC Methods: [`eth_chainId`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_chainid)
 *
 * @param client - Client to use
 * @returns The current chain ID. {@link GetChainIdReturnType}
 *
 * @example
 * import { createPublicClient, http } from 'viem'
 * import { mainnet } from 'viem/chains'
 * import { getChainId } from 'viem/public'
 *
 * const client = createPublicClient({
 *   chain: mainnet,
 *   transport: http(),
 * })
 * const chainId = await getChainId(client)
 * // 1
 */
async function getChainId(client) {
  const chainIdHex = await client.request({
    method: 'eth_chainId'
  }, {
    dedupe: true
  });
  return hexToNumber(chainIdHex);
}

const defaultParameters = ['blobVersionedHashes', 'chainId', 'fees', 'gas', 'nonce', 'type'];
/**
 * Prepares a transaction request for signing.
 *
 * - Docs: https://viem.sh/docs/actions/wallet/prepareTransactionRequest
 *
 * @param args - {@link PrepareTransactionRequestParameters}
 * @returns The transaction request. {@link PrepareTransactionRequestReturnType}
 *
 * @example
 * import { createWalletClient, custom } from 'viem'
 * import { mainnet } from 'viem/chains'
 * import { prepareTransactionRequest } from 'viem/actions'
 *
 * const client = createWalletClient({
 *   chain: mainnet,
 *   transport: custom(window.ethereum),
 * })
 * const request = await prepareTransactionRequest(client, {
 *   account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',
 *   to: '0x0000000000000000000000000000000000000000',
 *   value: 1n,
 * })
 *
 * @example
 * // Account Hoisting
 * import { createWalletClient, http } from 'viem'
 * import { privateKeyToAccount } from 'viem/accounts'
 * import { mainnet } from 'viem/chains'
 * import { prepareTransactionRequest } from 'viem/actions'
 *
 * const client = createWalletClient({
 *   account: privateKeyToAccount('0x…'),
 *   chain: mainnet,
 *   transport: custom(window.ethereum),
 * })
 * const request = await prepareTransactionRequest(client, {
 *   to: '0x0000000000000000000000000000000000000000',
 *   value: 1n,
 * })
 */
async function prepareTransactionRequest(client, args) {
  const {
    account: account_ = client.account,
    blobs,
    chain,
    gas,
    kzg,
    nonce,
    nonceManager,
    parameters = defaultParameters,
    type
  } = args;
  const account = account_ ? parseAccount(account_) : undefined;
  const request = {
    ...args,
    ...(account ? {
      from: account?.address
    } : {})
  };
  let block;
  async function getBlock$1() {
    if (block) return block;
    block = await getAction(client, getBlock, 'getBlock')({
      blockTag: 'latest'
    });
    return block;
  }
  let chainId;
  async function getChainId$1() {
    if (chainId) return chainId;
    if (chain) return chain.id;
    if (typeof args.chainId !== 'undefined') return args.chainId;
    const chainId_ = await getAction(client, getChainId, 'getChainId')({});
    chainId = chainId_;
    return chainId;
  }
  if ((parameters.includes('blobVersionedHashes') || parameters.includes('sidecars')) && blobs && kzg) {
    const commitments = blobsToCommitments({
      blobs,
      kzg
    });
    if (parameters.includes('blobVersionedHashes')) {
      const versionedHashes = commitmentsToVersionedHashes({
        commitments,
        to: 'hex'
      });
      request.blobVersionedHashes = versionedHashes;
    }
    if (parameters.includes('sidecars')) {
      const proofs = blobsToProofs({
        blobs,
        commitments,
        kzg
      });
      const sidecars = toBlobSidecars({
        blobs,
        commitments,
        proofs,
        to: 'hex'
      });
      request.sidecars = sidecars;
    }
  }
  if (parameters.includes('chainId')) request.chainId = await getChainId$1();
  if (parameters.includes('nonce') && typeof nonce === 'undefined' && account) {
    if (nonceManager) {
      const chainId = await getChainId$1();
      request.nonce = await nonceManager.consume({
        address: account.address,
        chainId,
        client
      });
    } else {
      request.nonce = await getAction(client, getTransactionCount, 'getTransactionCount')({
        address: account.address,
        blockTag: 'pending'
      });
    }
  }
  if ((parameters.includes('fees') || parameters.includes('type')) && typeof type === 'undefined') {
    try {
      request.type = getTransactionType(request);
    } catch {
      // infer type from block
      const block = await getBlock$1();
      request.type = typeof block?.baseFeePerGas === 'bigint' ? 'eip1559' : 'legacy';
    }
  }
  if (parameters.includes('fees')) {
    // TODO(4844): derive blob base fees once https://github.com/ethereum/execution-apis/pull/486 is merged.
    if (request.type !== 'legacy' && request.type !== 'eip2930') {
      // EIP-1559 fees
      if (typeof request.maxFeePerGas === 'undefined' || typeof request.maxPriorityFeePerGas === 'undefined') {
        const block = await getBlock$1();
        const {
          maxFeePerGas,
          maxPriorityFeePerGas
        } = await internal_estimateFeesPerGas(client, {
          block: block,
          chain,
          request: request
        });
        if (typeof args.maxPriorityFeePerGas === 'undefined' && args.maxFeePerGas && args.maxFeePerGas < maxPriorityFeePerGas) throw new MaxFeePerGasTooLowError({
          maxPriorityFeePerGas
        });
        request.maxPriorityFeePerGas = maxPriorityFeePerGas;
        request.maxFeePerGas = maxFeePerGas;
      }
    } else {
      // Legacy fees
      if (typeof args.maxFeePerGas !== 'undefined' || typeof args.maxPriorityFeePerGas !== 'undefined') throw new Eip1559FeesNotSupportedError();
      const block = await getBlock$1();
      const {
        gasPrice: gasPrice_
      } = await internal_estimateFeesPerGas(client, {
        block: block,
        chain,
        request: request,
        type: 'legacy'
      });
      request.gasPrice = gasPrice_;
    }
  }
  if (parameters.includes('gas') && typeof gas === 'undefined') request.gas = await getAction(client, estimateGas, 'estimateGas')({
    ...request,
    account: account ? {
      address: account.address,
      type: 'json-rpc'
    } : undefined
  });
  assertRequest(request);
  delete request.parameters;
  return request;
}

/**
 * Returns the balance of an address in wei.
 *
 * - Docs: https://viem.sh/docs/actions/public/getBalance
 * - JSON-RPC Methods: [`eth_getBalance`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getbalance)
 *
 * You can convert the balance to ether units with [`formatEther`](https://viem.sh/docs/utilities/formatEther).
 *
 * ```ts
 * const balance = await getBalance(client, {
 *   address: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',
 *   blockTag: 'safe'
 * })
 * const balanceAsEther = formatEther(balance)
 * // "6.942"
 * ```
 *
 * @param client - Client to use
 * @param parameters - {@link GetBalanceParameters}
 * @returns The balance of the address in wei. {@link GetBalanceReturnType}
 *
 * @example
 * import { createPublicClient, http } from 'viem'
 * import { mainnet } from 'viem/chains'
 * import { getBalance } from 'viem/public'
 *
 * const client = createPublicClient({
 *   chain: mainnet,
 *   transport: http(),
 * })
 * const balance = await getBalance(client, {
 *   address: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',
 * })
 * // 10000000000000000000000n (wei)
 */
async function getBalance(client, {
  address,
  blockNumber,
  blockTag = 'latest'
}) {
  const blockNumberHex = blockNumber ? numberToHex(blockNumber) : undefined;
  const balance = await client.request({
    method: 'eth_getBalance',
    params: [address, blockNumberHex || blockTag]
  });
  return BigInt(balance);
}

/**
 * Estimates the gas necessary to complete a transaction without submitting it to the network.
 *
 * - Docs: https://viem.sh/docs/actions/public/estimateGas
 * - JSON-RPC Methods: [`eth_estimateGas`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_estimategas)
 *
 * @param client - Client to use
 * @param parameters - {@link EstimateGasParameters}
 * @returns The gas estimate (in wei). {@link EstimateGasReturnType}
 *
 * @example
 * import { createPublicClient, http, parseEther } from 'viem'
 * import { mainnet } from 'viem/chains'
 * import { estimateGas } from 'viem/public'
 *
 * const client = createPublicClient({
 *   chain: mainnet,
 *   transport: http(),
 * })
 * const gasEstimate = await estimateGas(client, {
 *   account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',
 *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',
 *   value: parseEther('1'),
 * })
 */
async function estimateGas(client, args) {
  const account_ = args.account ?? client.account;
  const account = account_ ? parseAccount(account_) : undefined;
  try {
    const {
      accessList,
      authorizationList,
      blobs,
      blobVersionedHashes,
      blockNumber,
      blockTag,
      data,
      gas,
      gasPrice,
      maxFeePerBlobGas,
      maxFeePerGas,
      maxPriorityFeePerGas,
      nonce,
      value,
      stateOverride,
      ...rest
    } = await prepareTransactionRequest(client, {
      ...args,
      parameters:
      // Some RPC Providers do not compute versioned hashes from blobs. We will need
      // to compute them.
      account?.type === 'local' ? undefined : ['blobVersionedHashes']
    });
    const blockNumberHex = blockNumber ? numberToHex(blockNumber) : undefined;
    const block = blockNumberHex || blockTag;
    const rpcStateOverride = serializeStateOverride(stateOverride);
    const to = await (async () => {
      // If `to` exists on the parameters, use that.
      if (rest.to) return rest.to;
      // If no `to` exists, and we are sending a EIP-7702 transaction, use the
      // address of the first authorization in the list.
      if (authorizationList && authorizationList.length > 0) return await recoverAuthorizationAddress({
        authorization: authorizationList[0]
      }).catch(() => {
        throw new BaseError('`to` is required. Could not infer from `authorizationList`');
      });
      // Otherwise, we are sending a deployment transaction.
      return undefined;
    })();
    assertRequest(args);
    const chainFormat = client.chain?.formatters?.transactionRequest?.format;
    const format = chainFormat || formatTransactionRequest;
    const request = format({
      // Pick out extra data that might exist on the chain's transaction request type.
      ...extract(rest, {
        format: chainFormat
      }),
      from: account?.address,
      accessList,
      authorizationList,
      blobs,
      blobVersionedHashes,
      data,
      gas,
      gasPrice,
      maxFeePerBlobGas,
      maxFeePerGas,
      maxPriorityFeePerGas,
      nonce,
      to,
      value
    });
    function estimateGas_rpc(parameters) {
      const {
        block,
        request,
        rpcStateOverride
      } = parameters;
      return client.request({
        method: 'eth_estimateGas',
        params: rpcStateOverride ? [request, block ?? 'latest', rpcStateOverride] : block ? [request, block] : [request]
      });
    }
    let estimate = BigInt(await estimateGas_rpc({
      block,
      request,
      rpcStateOverride
    }));
    // TODO(7702): Remove this once https://github.com/ethereum/execution-apis/issues/561 is resolved.
    //       Authorization list schema is not implemented on JSON-RPC spec yet, so we need to
    //       manually estimate the gas.
    if (authorizationList) {
      const value = await getBalance(client, {
        address: request.from
      });
      const estimates = await Promise.all(authorizationList.map(async authorization => {
        const {
          contractAddress
        } = authorization;
        const estimate = await estimateGas_rpc({
          block,
          request: {
            authorizationList: undefined,
            data,
            from: account?.address,
            to: contractAddress,
            value: numberToHex(value)
          },
          rpcStateOverride
        }).catch(() => 100000n);
        return 2n * BigInt(estimate);
      }));
      estimate += estimates.reduce((acc, curr) => acc + curr, 0n);
    }
    return estimate;
  } catch (err) {
    throw getEstimateGasError(err, {
      ...args,
      account,
      chain: client.chain
    });
  }
}

const DEFAULT_VALUE = "0x0";
const DEFAULT_DATA = "0x";
const GAS_LIMIT_BUFFER_MULTIPLIER = 2n;
const EXPIRED_TIME_PLACEHOLDER = "0x5208";
function validateTransactionType(type) {
  if (!isSupportedTransaction(type)) throw new HeadlessClientError({
    cause: undefined,
    code: HeadlessClientErrorCode.UnsupportedTransactionTypeError,
    message: `Transaction type "${type}" is not supported. Supported types: legacy (0x0), EIP1559 (0x2), sponsored (0x64).`
  });
  return type;
}
function validateToAddress(to) {
  if (!to || !isAddress(to)) throw new HeadlessClientError({
    cause: undefined,
    code: HeadlessClientErrorCode.UnsupportedTransactionTypeError,
    message: `Invalid 'to' address: ${to}.`
  });
  return to;
}
function validateFromAddress(from) {
  if (!from || !isAddress(from)) throw new HeadlessClientError({
    cause: undefined,
    code: HeadlessClientErrorCode.PrepareTransactionError,
    message: `Invalid 'from' address: ${from}.`
  });
  return from;
}
async function estimateGasLimit(client, params) {
  try {
    const {
      to,
      from,
      value,
      data,
      gas
    } = params;
    if (gas) return gas;
    const baseGasLimit = await estimateGas(client, {
      to,
      account: from,
      value: hexToBigInt(value),
      data
    });
    return numberToHex(baseGasLimit * GAS_LIMIT_BUFFER_MULTIPLIER);
  } catch (error) {
    throw new HeadlessClientError({
      cause: error,
      code: HeadlessClientErrorCode.PrepareTransactionError,
      message: "Failed to estimate gas limit. This could be due to network issues or invalid transaction parameters."
    });
  }
}
async function getNonceFromNetwork(client, params) {
  try {
    const {
      from,
      nonce
    } = params;
    if (nonce) return nonce;
    const count = await getTransactionCount(client, {
      address: from,
      blockTag: "pending"
    });
    return numberToHex(count);
  } catch (error) {
    throw new HeadlessClientError({
      cause: error,
      code: HeadlessClientErrorCode.PrepareTransactionError,
      message: "Failed to get transaction nonce. This could be due to network issues or RPC problems."
    });
  }
}
const toTransactionInServerFormat = async params => {
  const {
    chain: {
      chainId,
      rpcUrl
    },
    currentAddress,
    transaction
  } = params;
  const {
    value = DEFAULT_VALUE,
    data = DEFAULT_DATA,
    type: rawType = SupportedTransaction.EIP1559,
    from: rawFrom = currentAddress,
    to: rawTo,
    gasPrice: rawGasPrice,
    nonce: rawNonce,
    input,
    gas
  } = transaction;
  const type = validateTransactionType(rawType);
  const to = validateToAddress(rawTo);
  const from = validateFromAddress(rawFrom);
  const client = createClient({
    transport: http(rpcUrl)
  });
  const transactionData = input ?? data;
  try {
    const [nonce, feesPerGas, gasLimit] = await Promise.all([getNonceFromNetwork(client, {
      from,
      nonce: rawNonce
    }), estimateFeesPerGas(client, {
      type,
      chainId,
      gasPrice: rawGasPrice
    }), estimateGasLimit(client, {
      to,
      from,
      value,
      gas,
      data: transactionData
    })]);
    const {
      gasPrice,
      maxFeePerGas,
      maxPriorityFeePerGas
    } = feesPerGas;
    const formattedTransaction = {
      type,
      from,
      to,
      value,
      nonce,
      gasPrice,
      input: transactionData,
      chainId: numberToHex(chainId),
      gas: gasLimit,
      maxFeePerGas,
      maxPriorityFeePerGas,
      r: DEFAULT_VALUE,
      v: DEFAULT_VALUE,
      s: DEFAULT_VALUE,
      payerS: PAYER_INFO.s,
      payerR: PAYER_INFO.r,
      payerV: PAYER_INFO.v,
      expiredTime: EXPIRED_TIME_PLACEHOLDER
    };
    return formattedTransaction;
  } catch (error) {
    if (error instanceof HeadlessClientError) {
      throw error;
    }
    throw new HeadlessClientError({
      cause: error,
      code: HeadlessClientErrorCode.PrepareTransactionError,
      message: "Failed to prepare transaction for server format."
    });
  }
};

export { DEFAULT_DATA, DEFAULT_VALUE, EXPIRED_TIME_PLACEHOLDER, GAS_LIMIT_BUFFER_MULTIPLIER, estimateGasLimit, getNonceFromNetwork, toTransactionInServerFormat, validateFromAddress, validateToAddress, validateTransactionType };
