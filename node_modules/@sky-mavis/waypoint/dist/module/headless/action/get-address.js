import { secp256k1 } from '../../secp256k1-BWEYsKUq.js';
import { HeadlessClientError, HeadlessClientErrorCode } from '../error/client.js';
import { base64ToBytes, bytesToJson } from '../utils/convertor.js';
import { p as publicKeyToAddress } from '../../publicKeyToAddress-DhFB83IE.js';
import '../../sha256-E5MvF2nn.js';
import '../../utils-CKEBUnDS.js';
import '../../toBytes-CiKSrzpb.js';
import '../../base-CC-Hj7CW.js';
import '../../size-CssOTqqV.js';
import '../../isAddress-D-kYvfsU.js';
import '../../keccak256-0IBB9HST.js';

const getAddressFromShard = clientShard => {
  if (!clientShard) {
    throw new HeadlessClientError({
      cause: undefined,
      code: HeadlessClientErrorCode.InvalidClientShardError,
      message: `Unable to get address from client shard. The parameter clientShard="${clientShard}" is NOT valid."`
    });
  }
  try {
    const shardInBytes = base64ToBytes(clientShard);
    const shard = bytesToJson(shardInBytes);
    const {
      publicPoint: compressedPublicKeyInBase64
    } = shard;
    const compressedPublicKeyInBytes = base64ToBytes(compressedPublicKeyInBase64);
    const projPoint = secp256k1.ProjectivePoint.fromHex(compressedPublicKeyInBytes);
    const uncompressedPublicKey = `0x${projPoint.toHex(false)}`;
    return publicKeyToAddress(uncompressedPublicKey);
  } catch (error) {
    throw new HeadlessClientError({
      cause: error,
      code: HeadlessClientErrorCode.InvalidClientShardError,
      message: `Unable to get address from client shard. The parameter clientShard="${clientShard}" is NOT valid."`
    });
  }
};
const getSecretFromShard = clientShard => {
  try {
    const shardInBytes = base64ToBytes(clientShard);
    const shard = bytesToJson(shardInBytes);
    const {
      secretShare: secretShareInBase64
    } = shard;
    const secretShareInBytes = base64ToBytes(secretShareInBase64);
    return secretShareInBytes;
  } catch (error) {
    throw new HeadlessClientError({
      cause: error,
      code: HeadlessClientErrorCode.InvalidClientShardError,
      message: `Unable to get secret from client shard. The parameter clientShard="${clientShard}" is NOT valid."`
    });
  }
};

export { getAddressFromShard, getSecretFromShard };
